#ARG VERSION=latest
FROM docker:dind

MAINTAINER cloudqq <cloudqq@gmail.com>

# Fix "Couldn't register with accessibility bus" error message
#ENV NO_AT_BRIDGE=1

# RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf

ENV GOLANG_VERSION 1.13

RUN echo @edge http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories
RUN apk update \
  && apk add build-base \
#  font-config \
  gcc \
  wget \
  git \
  bash \
  dbus-x11 \
  alsa-lib-dev \
  aspell \
  aspell-en \
  autoconf \
  automake \
  curl \
  dpkg \
  dpkg-dev \
  fontconfig-dev \
  gawk \
  gconf-dev \
  giflib-dev \
  git \
  glib-dev \
  gnupg \
  gnutls-dev \
  gtk+3.0-dev \
  lcms2-dev \
  libcanberra-gtk3 \
  libjpeg-turbo-dev \
  libpng-dev \
  librsvg-dev \
  libxaw-dev \
  libxml2-dev \
  jansson-dev \
  ncurses-dev \
  openssh-client \
  pango-dev \
  paxmark \
  python \
  texinfo \
  tiff-dev \
  graphviz \
  the_silver_searcher \
  go \
#  gnupg2 \
#  rlwrap \
  msttcorefonts-installer \
  ttf-dejavu \
  ttf-droid \
  ttf-freefont \
  ttf-liberation \
  ttf-ubuntu-font-family \
  wqy-zenhei@edge \
  rlwrap@edge \
  emacs \
  && rm -rf /var/cache/apk/*

RUN mkdir -p /usr/local/sbin \
  && git clone https://github.com/ncopa/su-exec.git /tmp/su-exec \
  && cd /tmp/su-exec \
  && make \
  && chmod 770 su-exec \
  && mv ./su-exec /usr/local/sbin

COPY asEnvUser /usr/local/sbin/

RUN chown root /usr/local/sbin/asEnvUser \
  && chmod 700  /usr/local/sbin/asEnvUser

ENV UNAME="cloudqq" \
  GNAME="cloudqq" \
  UHOME="/home/cloudqq" \
  UID="1000" \
  GID="1000" \
  WORKSPACE="/mnt/workspace" \
  SHELL="/bin/bash"

ENV FONT_HOME="${UHOME}/.local/share/fonts"

RUN mkdir -p "${FONT_HOME}/adobe-fonts/source-code-pro"

RUN git clone \
  --branch release \
  --depth 1 \
  'https://github.com/adobe-fonts/source-code-pro.git' \
  "${FONT_HOME}/adobe-fonts/source-code-pro" \
  && fc-cache -fv

#RUN fc-cache -f -v "${FONT_HOME}/adobe-fonts/source-code-pro"

RUN	export \
# set GOROOT_BOOTSTRAP such that we can actually build Go
		GOROOT_BOOTSTRAP="$(go env GOROOT)" \
# ... and set "cross-building" related vars to the installed system's values so that we create a build targeting the proper arch
# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)
		GOOS="$(go env GOOS)" \
		GOARCH="$(go env GOARCH)" \
		GOHOSTOS="$(go env GOHOSTOS)" \
		GOHOSTARCH="$(go env GOHOSTARCH)" \
	; \
# also explicitly set GO386 and GOARM if appropriate
# https://github.com/docker-library/golang/issues/184
	apkArch="$(apk --print-arch)"; \
	case "$apkArch" in \
		armhf) export GOARM='6' ;; \
		x86) export GO386='387' ;; \
	esac; \
	\
	wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	cd /usr/local/go/src; \
	./make.bash; \
	\
	rm -rf \
# https://github.com/golang/go/blob/0b30cf534a03618162d3015c8705dd2231e34703/src/cmd/dist/buildtool.go#L121-L125
		/usr/local/go/pkg/bootstrap \
# https://golang.org/cl/82095
# https://github.com/golang/build/blob/e3fe1605c30f6a3fd136b561569933312ede8782/cmd/release/releaselet.go#L56
		/usr/local/go/pkg/obj \
	; \
	\
	export PATH="/usr/local/go/bin:$PATH"; \
	go version


  # && export GOROOT=/usr/local/go \
  # && export GOPATH=/mnt/workspace/go \
  # && export PATH=$GOPATH/bin:$GOROOT/bin:$PATH \
  # && git clone --depth 1 https://github.com/junegunn/fzf.git /usr/local/fzf \
  # && cd /usr/local/fzf \
  # && make install \
  # && ./install --all

# ENV GOROOT=/usr/local/go
# ENV GOPATH=/mnt/workspace/go
# ENV PATH="${GOROOT}/bin:${GOROOT}/bin:/usr/local/fzf/bin:${PATH}"


#ENV DEBIAN_FRONTEND noninteractive

# basic stuff


CMD ["bash", "sh"]
