FROM golang:latest AS builder0
RUN \
  git clone --depth 1 https://github.com/junegunn/fzf.git  \
  && cd fzf \
  && make release && make install && pwd

FROM rust:latest AS builder1

RUN \
  git clone --depth 1 https://github.com/BurntSushi/ripgrep \
  && cd ripgrep \
  && cargo build --release \
  && ./target/release/rg --version \
  && cp ./target/release/rg /usr/local/bin

FROM ubuntu:latest AS builder2

ENV DEBIAN_FRONTEND noninteractive

RUN sed --in-place --regexp-extended "s/archive\.ubuntu/azure\.archive\.ubuntu/g" /etc/apt/sources.list \
  && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf \
  && apt-get update \
  && apt-get install build-essential git cmake zlib1g-dev

RUN apt-get install pkg-config libglib2.0  libreadline-dev

RUN git clone https://github.com/Dushistov/sdcv.git \
  && mkdir sdcv-build && cd sdcv-build && cmake -DENABLE_NLS=False ../sdcv && make && make install


FROM ubuntu:latest AS builder3

ENV DEBIAN_FRONTEND noninteractive

RUN sed --in-place --regexp-extended "s/archive\.ubuntu/azure\.archive\.ubuntu/g" /etc/apt/sources.list \
  && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf \
  && apt-get update \
  && apt-get install build-essential git cmake zlib1g-dev \
  pkg-config libglib2.0  libreadline-dev


RUN apt-get install doxygen  python-gi python3-gi python-xlib \
libboost-dev libboost-filesystem-dev libboost-regex-dev libboost-system-dev libboost-locale-dev libgoogle-glog-dev libgtest-dev 

# Manually install libopencc
RUN git clone https://github.com/BYVoid/OpenCC.git
WORKDIR OpenCC/
RUN make
RUN make install

# Fix libgtest problem during compiling
WORKDIR /usr/src/gtest
RUN cmake CMakeLists.txt
RUN make
#copy or symlink libgtest.a and libgtest_main.a to your /usr/lib folder
RUN cp *.a /usr/lib

RUN apt-get install libc6-dev   libyaml-cpp-dev   libleveldb-dev \
  libmarisa-dev  curl

WORKDIR /
RUN git clone https://github.com/rime/librime.git
WORKDIR librime/
RUN make
RUN make install

ENV rime_dir=/usr/local/share/rime
RUN curl -fsSL https://git.io/rime-install | bash

RUN git clone  https://gitlab.com/liberime/liberime.git
WORKDIR liberime/
RUN make


FROM ubuntu:latest AS builder4

ENV DEBIAN_FRONTEND noninteractive

RUN sed --in-place --regexp-extended "s/archive\.ubuntu/azure\.archive\.ubuntu/g" /etc/apt/sources.list \
  && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf \
  && apt-get update \
  && apt-get install build-essential git 

RUN git clone https://github.com/ncopa/su-exec.git /su-exec \
  && cd /su-exec \
  && make \
  && chmod 770 su-exec 

FROM ubuntu:latest

MAINTAINER cloudqq <cloudqq@gmail.com>

# Fix "Couldn't register with accessibility bus" error message
ENV NO_AT_BRIDGE=1

ENV DEBIAN_FRONTEND noninteractive

# basic stuff
RUN sed --in-place --regexp-extended "s/archive\.ubuntu/azure\.archive\.ubuntu/g" /etc/apt/sources.list \
  && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf \
  && apt-get update \
  && apt-get install  software-properties-common \
  apt-utils \
  && apt-add-repository ppa:kelleyk/emacs \
  && apt-get update \
  && apt-get install \
  bash \
  build-essential \
  emacs26 \
  emacs26-el \
  fontconfig \
  git \
  gzip \
  language-pack-en-base \
  make \
  cmake \
  sudo \
  tar \
  unzip \
  wget \
  curl \
  rlwrap \
  zsh \
  gnupg2 \
  msmtp \
  msmtp-mta \
  ca-certificates \
  ttf-mscorefonts-installer \
  fonts-wqy-zenhei \
  fonts-wqy-microhei \
  ttf-wqy-microhei \
  ttf-wqy-zenhei \
  xfonts-wqy \
  libpng-dev \
  libz-dev \
  libreadline-dev \
  libpoppler-glib-dev \
  libpoppler-glib-dev \
  libpoppler-private-dev \
  automake \
  fasd \
  isync \
  notmuch \
  net-tools \
  netcat \
  telnet \
  libboost-dev libboost-filesystem-dev libboost-regex-dev libboost-system-dev libboost-locale-dev  \
    && apt-get purge build-essential \
    && apt-get autoremove \
  && rm -rf /tmp/* /var/lib/apt/lists/* /root/.cache/*

COPY --from=builder4 /su-exec/su-exec /usr/local/sbin

RUN docker_url=https://download.docker.com/linux/static/stable/x86_64 \
  &&  docker_version=18.09.7 \
  &&  curl -fsSL $docker_url/docker-$docker_version.tgz | \
  tar zxvf - --strip 1 -C /usr/bin docker/docker \
  && curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
  && chmod +x /usr/local/bin/docker-compose

COPY asEnvUser /usr/local/sbin/

# Only for sudoers
RUN chown root /usr/local/sbin/asEnvUser \
    && chmod 700  /usr/local/sbin/asEnvUser

ENV UNAME="cloudqq" \
    GNAME="cloudqq" \
    UHOME="/home/cloudqq" \
    UID="1000" \
    GID="1000" \
    WORKSPACE="/mnt/workspace" \
    SHELL="/bin/bash"

ENV FONT_HOME="/usr/share/fonts"

RUN mkdir -p "{$FONT_HOME}/adobe-fonts/source-code-pro"

RUN (git clone \
 	--branch release \
	--depth 1 \
	'https://github.com/adobe-fonts/source-code-pro.git' \
  "$FONT_HOME/adobe-fonts/source-code-pro" && \
  fc-cache -f -v "$FONT_HOME/adobe-fonts/source-code-pro")

COPY windows "$FONT_HOME/windows"
RUN fc-cache -f -v "$FONT_HOME/windows"

COPY stardict-dict /tmp/dict 
RUN mkdir -p /usr/share/stardict/dic && cd /usr/share/stardict/dic \
  && for n in $(find /tmp/dict/*.bz2); do tar jxvf $n; done \
  && rm -rf /tmp/dict

# install fzf
COPY --from=builder0  /go/fzf/bin/fzf /usr/local/bin

#install ripgrep
COPY --from=builder1 /usr/local/bin /usr/local/bin

#install sdcv dict
COPY --from=builder2 /sdcv-build/sdcv /usr/local/bin

#install rime
COPY --from=builder3 /librime/build/bin/*.yaml /usr/local/share/rime/
COPY --from=builder3 /librime/build/bin/*.txt /usr/local/share/rime/
COPY --from=builder3 /librime/build/bin/rime_dict_manager /usr/local/bin/
COPY --from=builder3 /librime/build/bin/rime_deployer /usr/local/bin/
COPY --from=builder3 /librime/build/lib/librime.so.1.5.3 /usr/local/rime/
RUN cd /usr/local/rime && ln -s librime.so.1.5.3 librime.so.1 && ln -s librime.so.1 librime.so
COPY --from=builder3 /librime/liberime/build/liberime.so /usr/local/lib/rime/

RUN echo '/usr/local/lib/rime' >> /etc/ld.conf.so.d/rime.conf


#RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
#  echo 'Asia/Shanghai' > /etc/timezone && date
#RUN sed -e 's;UTC=yes;UTC=no;' -i /etc/default/rcS
RUN echo 'LC_ALL=zh_CN.UTF-8' > /etc/default/locale && \
  echo 'LANG=zh_CN.UTF-8' >> /etc/default/locale && \
  locale-gen zh_CN.UTF-8

ENV LC_CTYPE zh_CN.UTF-8

WORKDIR "${WORKSPACE}"

ENTRYPOINT ["asEnvUser"]
CMD ["bash", "-c", "emacs; /bin/bash"]

